spring 설정

1. xml
2.java
3.java+xml
** 설정파일을 용도에 따라 여러개로 분리 하는것도 가능
------------------------------------------------------------------------------

typeConversion

xml에 값을 표시하는 방법은 문자열 밖에없음
value="5"

5라고 표시한 값을 java문자열 타입으로 해석할지 , 숫자 타입으로 해석할지는
해당 class의 필드 타입을 보고 스프링이 결정하게 된다

대다수의 타입은 스프링 프레임워크가 타입을 자동으로 변경하는 것이 가능하나
날짜 타입에 대해서는 국가별, 사용자별 표기형식이 다르기 때문에
프레임 워크에서 임의로 타입 변환을 하는 것이 불가능 하다
 (UserVo reg_dt컬럼)
 
스프링 프레임워크에서 타입 변환이 필요한 경우는 크게 두가지 
1. 값을 주입할때 (DI)
2. 컨트롤러에서파라미터를 value객체에 바인딩할때

스프링 프레임워크에서 커스텀 타입 변환을 등록하는 방법은 크게 3가지
1.propertyEditor :문자 <==> 타입 간의 변환
2.ConversionService:타입 <==>타입간의 변환
3.formattingConversionService:타입<==> 타입간의 변환

1~3의 방법을 동시에 적용하는 것은 불가능
2,3의 경우 스프링빈의 이름을 id="conversionService"로 사용하도록 스프링에서 강제함

1번 :생략
2번 :1.스프링에서 제공하는 ConversionServiceFactoryBean클래스를 스프링 빈으로 등록
	(위에서 언급한 스프링 빈 이름을 준수해야함)
	2. 해당 클래스의converters필드에 개발자가 만든 convert를 set으로 주입
		.개발자가 만드는 converter는 Converter 인터페이스를 구현하여 만든다
		
3번: 1.스프링에서 제공하는 FormattingConversionServiceFactoryBean 클래스를 스프링 빈으로 등록
	(위에서 언급한 스프링 빈 이름을 준수해야함)
	2. Value객체에 어노테이션으로 적용
	
	-------------------------------------
스프링에서 컨트롤러 생성방법
** 서블릿의 과정과 유사
1.HttpServlet 클래스를 상속받은 클래스를 생성
2.url-mapping

spring
1. @Controller어노테이션을 적용한 클래스를 생선
2. @RequestMapping 어노테이션을 이용하여 class, method에 적용

**차이점 
서블릿의 경우 class단위로 url-mapping이 이루어짐
spring class/method url-mapping이 이루어짐 

servlet : userList, user, userResist, userModify, userDelete:5개의 서블릿을 생성
spring :한개로 통합 가능
-------------
스프링 컨트롤러 테스트
sevlet환경에서는 servlet자체를 테스트하기가 굉장히 어려움
servlet 생성/실행 하는 주체가 servlet-container
HttpServletRequest, HttpSession 등 필요한 객체가 많음

스프링 환경에서는 해당 객체를 쉽게 만들수 있는Mock객체를 제공
MockhttpServletRequest, MockhttpServletResponse, MockhttpSession

==> 손이 많이간다 

spring 프레임 워크에서 처리될 요청은 Dispatcher Servlet이 받으므로
Dispatcher Servlet을 대신하여 테스트 할수 있는 객체를 제공하는 형식으로 컨트롤러 테스트를 진행 
--------------------------------------0201
DispatcherServlet==> MockMVC
						 --> WebApplicationContext 객체가 필요
						 ==> 스프링 프레임워크에서 ioc컨테이너 생성시 자동으로 생성
						 
