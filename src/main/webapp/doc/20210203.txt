server side검증

1. spring Validator
	구현방법 : interface Validator를 구현

2. JSR-303(규약은 계속 추가/수정됨)-- 메이픈 레파지톨 hibernate vaildator--
	어노테이션을 이용 ==> command객체에 적용 
	@Notnull
	@Min , @Max
	@Size(min,max)
	@pattern(정규식)
	
	==> 
	
1번: 구체적으로 작성 가능 ,복잡한 로직 검증 가능
2번: 간단한 형태로만 검증 가능

resourceBundle 스프링 빈 등록
(ReloadableResourceBundleMessageSource) 오픈타입에서 

1.resourceBundle 파일준비(error.propertiest...)
2.messageSource스프링 빈 등록(ReloadableResourceBundleMessageSource)
3.validator , controller에 validate메소드 실행
4.jsp<form:errors path ="커맨드객체.필드"> ==> 해당 

container
	parent : Model
	(root-context)
	child  : Controller

spring message
:<spring:message code="GREETING" arguments="brown"></spring:message>

view Resolver: controller 가 반환하는 view name을 이용하여 해당 요청을 생성할
				view객체를 선택 
				
복수의 view resolver 등록이 가능 
view Resolver의 우선순위를 설정하여 적용될 순서를 결정 할수있다

기존 :internalResourceViewResolver
추가 : BeanNameViewResolver
	==> 컨트롤러가 반환하는 view name과 동일한 이름의스프링 빈이 있으면
		해당 스프링 빈을 view객체로 사용 
		
****internalResourceViewResolver 사용시 주의점
	==> prefix, subfix 조합에 의해 ㅅㅇ성된 문자열에 해당하는 리소스 (jsp)가 없어도
		검증을 하지 않고 응답을 내보낸다
		즉 파일이 존재하지 않을 경우 404에러 발생
		
		==> 우선순위를 가장 최 하위 단위로 둔다.
		
		parent
		
		child
		
		
--------------------------오후-------------
ExcelDownloadView

우리회사의 전체 직원 리스트
엑셀다운로드 뷰 클래스
1.ajax

2.엑셀다운


----------

Interceptor/ filter 차이점
 

